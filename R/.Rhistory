# subset(res.df, abs(log2FoldChange)>2, padj<2)
# subset(res.df, abs(log2FoldChange)>3 & -log10(padj)>10)
subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12)$symbol
# rownames(subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12))
subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12)
plotCounts(dds, "ENSG00000135750")
normalizedCounts <- counts(dds, normalized = TRUE)
normalizedCounts
# pheatmap(normalizedCounts)
# plotHeatmap(normalizedCounts)
# cols = scale_color_manual(values = wes_palette(n = 4, name = "GrandBudapest1"))
# cols.
# color_vector <- wes_palette(n = 4, name = "IsleofDogs1")
# sliderInput("my_slider", "Select a value:", min = 1, max = 10, value = 5)
# # shiny::updateSliderInput()
# # sliderInput("integer", "Integer:", min = 0, max = 1000, value = 500)
#
# selected_value <- input$my_slider
# result <- selected_value * 2
# result
EnhancedVolcano(res.df,
x = "log2FoldChange",
y = "padj",
lab = res.df$symbol,
FCcutoff = 4,
col = c('grey2', 'red3', 'red3', 'green4'),)
# EnhancedVolcano(res.df, x = "log2FoldChange", y = "padj", lab = rownames(res.df))
# nrow(count_LUM)
# count_TN[2,]
# count_LUM[2,]
# for (i in 1:nrow(count_LUM)) {
#   wilcox.test(as.numeric(count_TN[i,]), as.numeric(count_LUM[i,]))
# }
# shapiro_tests <- lapply((as.numeric(count_TN[i,]), as.numeric(count_LUM[i,])), wilcox.test)
# wilcox.test(as.numeric(count_TN[2,]), as.numeric(count_LUM[2,]))
#
# length(diff_means)
# diff_means <- rowMeans(count_LUM) - rowMeans(count_TN)
# # diff_means
# de_genes <- abs(diff_means) > 2000
#
# big_diff_means <- diff_means[de_genes]
# length(big_diff_means)
# # big_diff_means
# # de_genes
# plot(c(1, 2))
# plot(big_diff_means)
# # text(diff_means, labels = rownames(count_data), pos = 4)
normalizedCounts
normalizedCounts[,1:4]
normalizedCounts[1:4,]
pheatmap(normalizedCounts[1:20,])
pheatmap(normalizedCounts[1:1000,])
rownames(subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12))
class(rownames(subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12)))
normalizedCounts[rownames(subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12)),]
# normalized values of interesting genes:
norm_counts_subset <- normalizedCounts[rownames(subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12)),]
pheatmap(norm_counts_subset)
# pheatmap(normalizedCounts[1:1000,])
count_data[rownames(subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12)),]
# pheatmap(normalizedCounts[1:1000,])
counts_subset <- count_data[rownames(subset(res.df, abs(log2FoldChange)>4 & -log10(padj)>12)),]
pheatmap(counts_subset)
# pheatmap(normalizedCounts[1:1000,])
counts_subset <- count_data[rownames(subset(res.df, abs(log2FoldChange)>6 & -log10(padj)>14)),]
pheatmap(counts_subset)
norm_counts_subset <- normalizedCounts[rownames(subset(res.df, abs(log2FoldChange)>6 & -log10(padj)>14)),]
pheatmap(norm_counts_subset)
pheatmap(counts_subset)
pheatmap(norm_counts_subset, cluster_cols=FALSE)
knitr::opts_chunk$set(echo = TRUE)
# BiocManager::install("DESeq2")
# if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# install.packages('ggrepel')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("EnhancedVolcano")
# BiocManager::install("org.Hs.eg.db")
set.seed(888)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(ggrepel)
library("data.table")
library(EnhancedVolcano)
library(org.Hs.eg.db)
# install.packages("wesanderson")
library(wesanderson)
# install.packages("factoextra")
library(FactoMineR)    # For PCA
library(cluster)       # For clustering
# install.packages("plotly")
library(plotly)
# library(shiny)
# install.packages("pheatmap")
library(pheatmap)
# pheatmap(normalizedCounts[1:1000,])
counts_subset <- count_data[rownames(subset(res.df, abs(log2FoldChange)>6 & -log10(padj)>14)),]
counts_subset
log_counts_subset <- lapply(counts_subset, function(x) ifelse(is.numeric(x) & x != 0, log10(x), x))
# log_counts_subset[] <- lapply(counts_subset, function(x) if(is.numeric(x) && x != 0) log10(x) else x)
log_counts_subset <- data.frame(log_counts_subset)
log_counts_subset
pheatmap(log_counts_subset)
log_counts_subset <- lapply(counts_subset, function(x) ifelse(is.numeric(x) & x != 0, log7(x), x))
log_counts_subset <- lapply(counts_subset, function(x) ifelse(is.numeric(x) & x != 0, log2(x), x))
# log_counts_subset[] <- lapply(counts_subset, function(x) if(is.numeric(x) && x != 0) log10(x) else x)
log_counts_subset <- data.frame(log_counts_subset)
log_counts_subset
pheatmap(log_counts_subset)
log_counts_subset
log_counts_subset <- lapply(counts_subset, function(x) ifelse(is.numeric(x) & x != 0, log(x), x))
# log_counts_subset[] <- lapply(counts_subset, function(x) if(is.numeric(x) && x != 0) log10(x) else x)
log_counts_subset <- data.frame(log_counts_subset)
log_counts_subset
pheatmap(log_counts_subset)
pheatmap(log_counts_subset,  method = "ward.D")
pheatmap(log_counts_subset, cluster_rows = TRUE,  method = "ward.D")
pheatmap(log_counts_subset, cluster_cols = TRUE, cluster_rows = TRUE,  method = "ward.D")
pheatmap(log_counts_subset)
log_counts_subset
log_counts_subset[] <- lapply(counts_subset, function(x) ifelse(is.numeric(x) & x != 0, log(x), x))
# log_counts_subset[] <- lapply(counts_subset, function(x) if(is.numeric(x) && x != 0) log10(x) else x)
log_counts_subset <- data.frame(log_counts_subset)
log_counts_subset
knitr::opts_chunk$set(echo = TRUE)
# BiocManager::install("DESeq2")
# if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# install.packages('ggrepel')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("EnhancedVolcano")
# BiocManager::install("org.Hs.eg.db")
set.seed(888)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(ggrepel)
library("data.table")
library(EnhancedVolcano)
library(org.Hs.eg.db)
# install.packages("wesanderson")
library(wesanderson)
# install.packages("factoextra")
library(FactoMineR)    # For PCA
library(cluster)       # For clustering
# install.packages("plotly")
library(plotly)
# library(shiny)
# install.packages("pheatmap")
library(pheatmap)
# BiocManager::install("fgsea")
library(fgsea)
# install.packages("msigdbr")
# library(msigdbr)
# BiocManager::install("biomaRt")
# library(biomaRt)
# BiocManager::install("clusterProfiler")
library(clusterProfiler)
# BiocManager::install("topGO")
library(topGO)
#ordered by log2fc
ordered_log2fc <- res[order(-(res$log2FoldChange)), ]
ordered_log2fc
gene_list_log2fc <- ordered_log2fc$log2FoldChange
names(gene_list_log2fc) <- rownames(ordered_log2fc)
gene_list_log2fc
gse_fc <- gseGO(gene_list_log2fc,
ont = "BP",
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
eps = 1e-300)
as.data.frame(gse_fc)
gseaplot(gse_fc, geneSetID = 1)
enriched_ids <- head(gse@result$ID, 10)  # Top 10 enriched gene IDs
enriched_ids <- head(gse_fc@result$ID, 10)  # Top 10 enriched gene IDs
enriched_desc <- head(gse_fc@result$Description, 10)
pvalues <- head(gse_fc@result$p.adjust, 10)  # P-values for the top 10 enriched gene IDs
seq_counts <- head(gse_fc@result$setSize, 10)
top_enriched <- data.frame(ID = enriched_ids, Pvalue = pvalues, Count = seq_counts)
plot_top10_over <- ggplot(top_enriched, aes(x = enriched_desc, y = -log10(Pvalue), size = Count)) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "-log10(P-value)", size = "Sequence Count") +
theme_minimal()
plot_top10_over
#ordered by log2fc
# ordered_log2fc <- res[order(-(res$log2FoldChange)), ]
ordered_log2fc <- res[order(-abs(res$log2FoldChange)), ]
ordered_log2fc
#ordered by log2fc
ordered_log2fc <- res[order(-(res$log2FoldChange)), ]
ordered_log2fc
#ordered by log2fc
# ordered_log2fc <- res[order(-(res$log2FoldChange)), ]
ordered_log2fc <- res[order(-abs(res$log2FoldChange)), ]
ordered_log2fc
ordered_log2fc
gene_list_log2fc <- ordered_log2fc$log2FoldChange
names(gene_list_log2fc) <- rownames(ordered_log2fc)
gene_list_log2fc
gse_fc <- gseGO(gene_list_log2fc,
ont = "BP",
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
eps = 1e-300)
#ordered by log2fc
ordered_log2fc <- res[order(-(res$log2FoldChange)), ]
# ordered_log2fc <- res[order(-abs(res$log2FoldChange)), ]
ordered_log2fc
gene_list_log2fc <- ordered_log2fc$log2FoldChange
names(gene_list_log2fc) <- rownames(ordered_log2fc)
gene_list_log2fc
gse_fc <- gseGO(gene_list_log2fc,
ont = "BP",
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
eps = 1e-300)
?gse_fc
??gse_fc
gse_fc
gse_fc$Description
gse_fc$Description[1]
gseaplot(gse_fc, geneSetID = 1, title = gse_fc$Description[1])
gse_fc$Description
gseaplot(gse_fc, geneSetID = 677, title = gse_fc$Description[677])
length(gse_fc$Description)
gseaplot(gse_fc, geneSetID = length(gse_fc$Description), title = gse_fc$Description[length(gse_fc$Description)])
# length(gse_fc$Description) = 677
gseaplot(gse_fc, geneSetID = 677-1, title = gse_fc$Description[677-1])
head(gse_fc@result$ID, 10) + tail(gse_fc@result$ID, 10)
head(gse_fc@result$ID, 10), tail(gse_fc@result$ID, 10)
head(gse_fc@result$ID, 10) <- tail(gse_fc@result$ID, 10)
enriched_ids <- list(head(gse_fc@result$ID, 10), tail(gse_fc@result$ID, 10))
enriched_ids
enriched_ids <- c(head(gse_fc@result$ID, 10), tail(gse_fc@result$ID, 10))
enriched_ids
enriched_ids_ht <- c(head(gse_fc@result$ID, 10), tail(gse_fc@result$ID, 10))
enriched_desc_ht <- c(head(gse_fc@result$Description, 10), tail(gse_fc@result$Description, 10))
pvalues_ht <- c(head(gse_fc@result$p.adjust, 10), tail(gse_fc@result$p.adjust, 10))
seq_counts_ht <- c(head(gse_fc@result$setSize, 10), tail(gse_fc@result$setSize, 10))
top_enriched_ht <- data.frame(ID = enriched_ids_ht, Pvalue = pvalues_ht, Count = seq_counts_ht)
plot_top10_over_ht <- ggplot(top_enriched_ht, aes(x = enriched_desc_ht, y = -log10(Pvalue), size = Count)) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "-log10(P-value)", size = "Sequence Count") +
theme_minimal()
plot_top10_over_ht
top_enriched_ht
gse_fc@result$enrichmentScore
gseaplot(gse_fc, geneSetID = 12, title = gse_fc$Description[2])
gseaplot(gse_fc, geneSetID = 12, title = gse_fc$Description[12])
gseaplot(gse_fc, geneSetID = 5, title = gse_fc$Description[5])
plot_top10_over <- ggplot(top_enriched, aes(x = enriched_desc, y = -log10(Pvalue), size = Count)) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "-log10(P-value)", size = "Sequence Count") +
theme_minimal()
plot_top10_over
enrich_score <- head(gse_fc@result$enrichmentScore, 10)
top_enriched <- data.frame(ID = enriched_ids, Pvalue = pvalues, Count = seq_counts, enrichment_score = enrich_score)
top_enriched
plot_top10_over <- ggplot(top_enriched, aes(x = enriched_desc, y = enrichment_score, size = Count, color = -log10(Pvalue))) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "-log10(P-value)", size = "Sequence Count", color = "-log10(Pvalue)") +
theme_minimal()
plot_top10_over
enriched_ids <- head(gse_fc@result$ID, 10)  # Top 10 enriched gene IDs
enriched_desc <- head(gse_fc@result$Description, 10)
pvalues <- head(gse_fc@result$p.adjust, 10)  # P-values for the top 10 enriched gene IDs
seq_counts <- head(gse_fc@result$setSize, 10)
enrich_score <- head(gse_fc@result$enrichmentScore, 10)
top_enriched <- data.frame(ID = enriched_ids, Pvalue = pvalues, Count = seq_counts, enrichment_score = enrich_score)
top_enriched
plot_top10_over <- ggplot(top_enriched, aes(x = enriched_desc, y = enrichment_score, size = Count, color = -log10(Pvalue))) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "-log10(P-value)", size = "Sequence Count", color = "-log10(Pvalue)") +
theme_minimal()
plot_top10_over
plot_top10_over <- ggplot(top_enriched, aes(x = enriched_desc, y = enrichment_score, size = Count, color = -log10(Pvalue))) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "Enrichment Score", size = "Sequence Count", color = "-log10(Pvalue)") +
theme_minimal()
plot_top10_over
pa_amount = 30
enriched_ids <- head(gse_fc@result$ID, pa_amount)  # Top 10 enriched gene IDs
enriched_desc <- head(gse_fc@result$Description, pa_amount)
pvalues <- head(gse_fc@result$p.adjust, pa_amount)  # P-values for the top 10 enriched gene IDs
seq_counts <- head(gse_fc@result$setSize, pa_amount)
enrich_score <- head(gse_fc@result$enrichmentScore, pa_amount)
top_enriched <- data.frame(ID = enriched_ids, Pvalue = pvalues, Count = seq_counts, enrichment_score = enrich_score)
top_enriched
plot_top10_over <- ggplot(top_enriched, aes(x = enriched_desc, y = enrichment_score, size = Count, color = -log10(Pvalue))) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "Enrichment Score", size = "Sequence Count", color = "-log10(Pvalue)") +
theme_minimal()
plot_top10_over
plot_top10_over <- ggplot(top_enriched, aes(x = reorder(enriched_desc, abs(enrichment_score)), y = enrichment_score, size = Count, color = -log10(Pvalue))) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "Enrichment Score", size = "Sequence Count", color = "-log10(Pvalue)") +
theme_minimal()
plot_top10_over
pa_amount = 40
enriched_ids <- head(gse_fc@result$ID, pa_amount)  # Top 10 enriched gene IDs
enriched_desc <- head(gse_fc@result$Description, pa_amount)
seq_counts <- head(gse_fc@result$setSize, pa_amount)
enrich_score <- head(gse_fc@result$enrichmentScore, pa_amount)
top_enriched <- data.frame(ID = enriched_ids, Pvalue = pvalues, Count = seq_counts, enrichment_score = enrich_score)
plot_top10_over <- ggplot(top_enriched, aes(x = reorder(enriched_desc, abs(enrichment_score)), y = enrichment_score, size = Count, color = -log10(Pvalue))) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "Enrichment Score", size = "Sequence Count", color = "-log10(Pvalue)") +
theme_minimal()
plot_top10_over
pa_amount = 30
enriched_ids <- head(gse_fc@result$ID, pa_amount)  # Top 10 enriched gene IDs
enriched_desc <- head(gse_fc@result$Description, pa_amount)
pvalues <- head(gse_fc@result$p.adjust, pa_amount)  # P-values for the top 10 enriched gene IDs
seq_counts <- head(gse_fc@result$setSize, pa_amount)
enrich_score <- head(gse_fc@result$enrichmentScore, pa_amount)
top_enriched <- data.frame(ID = enriched_ids, Pvalue = pvalues, Count = seq_counts, enrichment_score = enrich_score)
top_enriched
plot_top10_over <- ggplot(top_enriched, aes(x = reorder(enriched_desc, abs(enrichment_score)), y = enrichment_score, size = Count, color = -log10(Pvalue))) +
geom_point() +
coord_flip() +
labs(x = "Enriched Gene IDs", y = "Enrichment Score", size = "Sequence Count", color = "-log10(Pvalue)") +
theme_minimal()
plot_top10_over
lines
lines = readLines("../example.fastq")
lines = readLines("../example.fastq")
lines = readLines("../example.fastq")
ls
pwd
ls
setwd("~/Desktop/SAMPLE_TEXT/kiddy/FASTQ_parser_any_lang/FASTQ_parser_any_lang/R")
lines = readLines("../example.fastq")
lines
table = read.table("../example.fastq")
table
lines <- readLines("../example.fastq")
lines
df_lines <- as.data.frame(lines)
df_lines
df_lines$lines
length(lines)
df_lines <- as.data.frame(fastq_content = lines,
id = seq(0, length(lines), by=4),
id_content = rep(content_list, times = length(lines)/4))
content_list = c("name", "sequence", "ignore", "quality")
df_lines <- as.data.frame(fastq_content = lines,
id = seq(0, length(lines), by=4),
id_content = rep(content_list, times = length(lines)/4))
rep(content_list, times = length(lines)/4)
type(rep(content_list, times = length(lines)/4))
?rep
df_lines <- as.data.frame(fastq_content = lines,
id = seq(0, length(lines), by=4),
id_content = rep(content_list, times = length(lines)/4))
df_lines <- data.frame(fastq_content = lines,
id = seq(0, length(lines), by=4),
id_content = rep(content_list, times = length(lines)/4))
length(rep(content_list, times = length(lines)/4))
length(lines)
length(seq(0, length(lines), by=4)_
length(seq(0, length(lines), by=4))
?seq
seq(0, length(lines), by=4)*4
seq(0, length(lines), by=4)
seq(0, length(lines), by=4) ~ 4
rep(1:4, c(2,2,2,2))
rep(1:4, 2)
rep(1:4, c(2,1,2,1))
rep(1:4, c(4,4,4,4))
rep(1:length(lines), c(4,4,4,4))
rep(4, 4)
rep(4, length(lines))
rep(1:length(lines), rep(4, length(lines)))
length(rep(1:length(lines), rep(4, length(lines))))
length(rep(1:length(lines), rep(4, length(lines)/4)))
length(rep(1:length(lines), rep(4, (length(lines)/4))))
length(rep(1:length(lines), rep(4, length(lines)))
length(rep(1:length(lines), rep(4, length(lines))))
length((rep(1:length(lines), rep(4, length(lines)))))
length((rep(1:length(lines), rep(4, (length(lines)/4)))))
length(lines)/4
length((rep(1:length(lines), rep(4, times = (length(lines)/4)))))
times <- length(lines)/4
length((rep(1:length(lines), rep(4, times))))
length((rep(1:length(lines), rep(4, 200))))
length((rep(1:length(lines), rep(4: times = (length(lines)/4)))))
rep(4, 400)
rep(4, length(lines)/4)
rep(1:length(lines), rep(4, length(lines)/4))
rep(1:length(lines), c(4,4,4,4))
rep(4, length(lines)/4)
rep_times = rep(4, length(lines)/4)
rep(1:length(lines), rep_times)
?rep
rep(1:length(lines), 4)
rep(1:length(lines), c(4,4,4))
rep(1:length(lines), 4)
rep(4, length(lines)/4)
rep(1:4, each = 2, len = 4)
rep(1:4, each = 2)
rep(1:4, each = 4)
rep(1:length(lines), each = 4)
length(rep(1:length(lines), each = 4))
length(lines)
length(rep(0:length(lines), each = 4))
length(rep(0:length(lines)/4, each = 4))
length(rep(0:length(lines)/4, each = 4))
length(rep(0:(length(lines)/4), each = 4))
length(rep(1:(length(lines)/4), each = 4))
df_lines <- data.frame(fastq_content = lines,
id = rep(1:(length(lines)/4), each = 4),
id_content = rep(content_list, times = length(lines)/4))
df_lines
df_lines
df_lines$
df_lines$id
df_lines$id
df_lines[df_lines$id == 3]
# df_lines[df_lines$id == 3]
df_lines[3,]
head(df_lines)
df_lines[df_lines$id == 1,]
df_lines[df_lines$id == 1,]
df_lines[df_lines$id_content == "name",]
df_lines[df_lines$id == 2,]
df_lines[df_lines$id == 2 & df_lines$id_content == "name" ,]
df_lines[df_lines$id == 2 & df_lines$id_content == "name" ,]$fastq_content
df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content
# startsWith(df_lines[df_lines$id == 2 & df_lines$id_content == "name" ,]$fastq_content, "@") == TRUE
# df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content
if (startsWith(df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content, "@")){
print("correct parsing workd")
}
# startsWith(df_lines[df_lines$id == 2 & df_lines$id_content == "name" ,]$fastq_content, "@") == TRUE
# df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content
if (startsWith(df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content, "@")){
print("fastq file was most likely parsed correctly")
}else {
print("parsing failed")
}
# startsWith(df_lines[df_lines$id == 2 & df_lines$id_content == "name" ,]$fastq_content, "@") == TRUE
# df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content
if (startsWith(df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content, "-")){
print("fastq file was most likely parsed correctly")
}else {
print("parsing failed")
}
# startsWith(df_lines[df_lines$id == 2 & df_lines$id_content == "name" ,]$fastq_content, "@") == TRUE
# df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content
if (startsWith(df_lines[df_lines$id == length(lines)/4 & df_lines$id_content == "name" ,]$fastq_content, "@")){
print("fastq file was most likely parsed correctly")
}else {
print("parsing failed")
}
# startsWith(fastq_df[fastq_df$id == 2 & fastq_df$id_content == "name" ,]$fastq_content, "@") == TRUE
# fastq_df[fastq_df$id == length(lines)/4 & fastq_df$id_content == "name" ,]$fastq_content
if (startsWith(fastq_df[fastq_df$id == length(lines)/4 & fastq_df$id_content == "name" ,]$fastq_content, "@")){
print("fastq file was most likely parsed correctly")
}else {
print("parsing failed")
}
fastq_df <- data.frame(fastq_content = lines,
id = rep(1:(length(lines)/4), each = 4),
id_content = rep(content_list, times = length(lines)/4))
fastq_df[fastq_df$id == 2 & fastq_df$id_content == "name" ,]$fastq_content
print("you can use the fastq_df:
fastq_df[fastq_df$id == 1,]
fastq_df[fastq_df$id_content == "name",]")
print("you can use the fastq_df: \
fastq_df[fastq_df$id == 1,]\
fastq_df[fastq_df$id_content == "name",]")
print("you can use the fastq_df:
fastq_df[fastq_df$id == 1,]
fastq_df[fastq_df$id_content == 'name,]")
print("you can use the fastq_df:\n\tfastq_df[fastq_df$id == 1,]\n\tfastq_df[fastq_df$id_content == 'name,]")
cat("you can use the fastq_df:\n\tfastq_df[fastq_df$id == 1,]\n\tfastq_df[fastq_df$id_content == 'name,]")
tttac("you can use the fastq_df:\n\tfastq_df[fastq_df$id == 1,]\n\tfastq_df[fastq_df$id_content == 'name,]")
tac("you can use the fastq_df:\n\tfastq_df[fastq_df$id == 1,]\n\tfastq_df[fastq_df$id_content == 'name,]")
# fastq_df[fastq_df$id == 2 & fastq_df$id_content == "name" ,]$fastq_content
# startsWith(fastq_df[fastq_df$id == 2 & fastq_df$id_content == "name" ,]$fastq_content, "@") == TRUE
# fastq_df[fastq_df$id == length(lines)/4 & fastq_df$id_content == "name" ,]$fastq_content
if (startsWith(fastq_df[fastq_df$id == length(lines)/4 & fastq_df$id_content == "name" ,]$fastq_content, "@")){
print("fastq file was most likely parsed correctly")
cat("you can use the fastq_df:\n\tfastq_df[fastq_df$id == 1,]\n\tfastq_df[fastq_df$id_content == 'name,]")
}else {
print("parsing failed")
}
# fastq_df[fastq_df$id == 2 & fastq_df$id_content == "name" ,]$fastq_content
# startsWith(fastq_df[fastq_df$id == 2 & fastq_df$id_content == "name" ,]$fastq_content, "@") == TRUE
# fastq_df[fastq_df$id == length(lines)/4 & fastq_df$id_content == "name" ,]$fastq_content
if (startsWith(fastq_df[fastq_df$id == length(lines)/4 & fastq_df$id_content == "name" ,]$fastq_content, "@")){
cat("fastq file was most likely parsed correctly\n\nyou can use the fastq_df:\n\tfastq_df[fastq_df$id == 1,]\n\tfastq_df[fastq_df$id_content == 'name,]")
}else {
print("parsing failed")
}
cat("fastq file was most likely parsed correctly\n\nyou can now use the fastq_d.\n examples:\n\tfastq_df[fastq_df$id == 1,]\n\tfastq_df[fastq_df$id_content == 'name,]")
cat("fastq file was most likely parsed correctly\n\nyou can now use the fastq_d.\n examples:\n   fastq_df[fastq_df$id == 1,]\n   fastq_df[fastq_df$id_content == 'name,]")
cat("fastq file was most likely parsed correctly\n\nyou can now use the fastq_df (datafram).\n examples:\n   fastq_df[fastq_df$id == 1,]\n   fastq_df[fastq_df$id_content == 'name,]")
cat("fastq file was most likely parsed correctly\n\nyou can now use the fastq_df (dataframe).\n examples:\n   fastq_df[fastq_df$id == 1,]\n   fastq_df[fastq_df$id_content == 'name,]")
